package org.com.hcmurs.ui.screens.metro.buyticket

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.ConfirmationNumber
import androidx.compose.material.icons.filled.Home // Kh√¥ng c√≤n d√πng Home, c√≥ th·ªÉ x√≥a import n√†y n·∫øu kh√¥ng d√πng
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import org.com.hcmurs.ui.theme.HcmursAppTheme // Import theme c·ªßa b·∫°n

// Data classes remains the same, they are good
data class TicketOption(
    val title: String,
    val price: String,
    val icon: ImageVector = Icons.Default.ConfirmationNumber
)

data class RouteInfo(
    val from: String,
    val details: String = "Xem chi ti·∫øt"
)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BuyTicketScreen(navController: NavHostController) {
    Scaffold(
        topBar = {
            BuyTicketTopBar(
                onBackClick = { navController.popBackStack() }
            )
        },
        containerColor = MaterialTheme.colorScheme.background // N·ªÅn c·ªßa Scaffold l√† m√†u background c·ªßa theme
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .verticalScroll(rememberScrollState())
                .padding(horizontal = 16.dp, vertical = 8.dp) // ƒêi·ªÅu ch·ªânh padding t·ªïng th·ªÉ
        ) {
            // Welcome section
            WelcomeCard()

            Spacer(modifier = Modifier.height(24.dp))

            // Hot section (Changed to use a more generic SectionHeader)
            SectionHeader(title = "V√© N·ªïi b·∫≠t", icon = "üî•")

            Spacer(modifier = Modifier.height(12.dp))

            // Regular tickets
            TicketOptionsSection(navController)

            Spacer(modifier = Modifier.height(32.dp))

            // Student/Discount section
            SectionHeader(title = "∆Øu ƒë√£i", icon = "üåü")
            Spacer(modifier = Modifier.height(12.dp))
            StudentDiscountSection(navController)

            Spacer(modifier = Modifier.height(32.dp))

            // Routes section
            SectionHeader(title = "Tuy·∫øn ƒë∆∞·ªùng", icon = "üó∫Ô∏è")
            Spacer(modifier = Modifier.height(12.dp))
            RoutesSection()

            Spacer(modifier = Modifier.height(32.dp))

            // Long term ticket section
            SectionHeader(title = "V√© d√†i h·∫°n", icon = "üóìÔ∏è")
            Spacer(modifier = Modifier.height(12.dp))
            LongTermTicketSection(navController)

            Spacer(modifier = Modifier.height(80.dp)) // Space for bottom navigation
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BuyTicketTopBar(onBackClick: () -> Unit) {
    CenterAlignedTopAppBar(
        title = {
            Text(
                text = "Mua v√©",
                color = MaterialTheme.colorScheme.onSurface, // M√†u ch·ªØ ti√™u ƒë·ªÅ t·ª´ theme
                style = MaterialTheme.typography.titleLarge, // S·ª≠ d·ª•ng typography t·ª´ theme
                fontWeight = FontWeight.Bold // C√≥ th·ªÉ gi·ªØ fontweight n·∫øu mu·ªën n·ªïi b·∫≠t h∆°n style m·∫∑c ƒë·ªãnh
            )
        },
        navigationIcon = {
            IconButton(onClick = onBackClick) {
                Icon(
                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                    contentDescription = "Back",
                    tint = MaterialTheme.colorScheme.primary // M√†u icon t·ª´ theme
                )
            }
        },
        colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
            containerColor = Color.Transparent, // N·ªÅn trong su·ªët
            titleContentColor = MaterialTheme.colorScheme.onSurface // ƒê·∫£m b·∫£o m√†u ch·ªØ ti√™u ƒë·ªÅ ƒë√∫ng
        )
    )
}

@Composable
fun WelcomeCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer), // M√†u n·ªÅn t·ª´ theme
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Surface(
                modifier = Modifier.size(56.dp),
                shape = CircleShape,
                color = MaterialTheme.colorScheme.onPrimary // M√†u tr·∫Øng tinh khi·∫øt tr√™n n·ªÅn primary
            ) {
                Box(contentAlignment = Alignment.Center) {
                    Text(
                        text = "ü¶Å",
                        fontSize = 32.sp // Gi·ªØ fontSize cho emoji v√¨ typography kh√¥ng √°p d·ª•ng cho emoji
                    )
                }
            }
            Spacer(modifier = Modifier.width(16.dp))

            Column {
                Text(
                    text = "Ch√†o m·ª´ng, Anh T√∫!",
                    style = MaterialTheme.typography.titleMedium, // S·ª≠ d·ª•ng typography t·ª´ theme
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onPrimaryContainer // M√†u ch·ªØ t∆∞∆°ng ph·∫£n t·ª´ theme
                )
                Text(
                    text = "B·∫Øt ƒë·∫ßu c√°c tr·∫£i nghi·ªám m·ªõi c√πng Metro nh√©!",
                    style = MaterialTheme.typography.bodyMedium, // S·ª≠ d·ª•ng typography t·ª´ theme
                    color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f) // M√†u ch·ªØ nh·∫°t h∆°n t·ª´ theme
                )
            }
        }
    }
}

@Composable
fun SectionHeader(title: String, icon: String) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.padding(vertical = 4.dp)
    ) {
        Text(text = icon, fontSize = 24.sp) // Gi·ªØ fontSize cho emoji
        Spacer(modifier = Modifier.width(12.dp))
        Text(
            text = title,
            style = MaterialTheme.typography.headlineSmall, // S·ª≠ d·ª•ng typography t·ª´ theme
            fontWeight = FontWeight.ExtraBold,
            color = MaterialTheme.colorScheme.onSurface // M√†u ch·ªØ ti√™u ƒë·ªÅ t·ª´ theme
        )
    }
}

@Composable
fun TicketOptionsSection(navController: NavHostController) {
    val ticketOptions = listOf(
        TicketOption("V√© 1 ng√†y", "40.000 ƒë"),
        TicketOption("V√© 3 ng√†y", "90.000 ƒë"),
        TicketOption("V√© th√°ng", "300.000 ƒë")
    )

    Column(
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        ticketOptions.forEach { ticket ->
            TicketCard(ticket = ticket, navController = navController)
        }
    }
}

@Composable
fun TicketCard(ticket: TicketOption, navController: NavHostController) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable {
                navController.navigate("ticket_detail/${ticket.title}/${ticket.price}")
            },
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface), // M√†u n·ªÅn card t·ª´ theme
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Surface(
                modifier = Modifier.size(48.dp),
                shape = CircleShape,
                color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f) // N·ªÅn m√†u ch√≠nh nh·∫°t t·ª´ theme
            ) {
                Box(contentAlignment = Alignment.Center) {
                    Icon(
                        imageVector = ticket.icon,
                        contentDescription = ticket.title,
                        tint = MaterialTheme.colorScheme.primary, // M√†u icon t·ª´ theme
                        modifier = Modifier.size(28.dp)
                    )
                }
            }
            Spacer(modifier = Modifier.width(16.dp))

            Column {
                Text(
                    text = ticket.title,
                    style = MaterialTheme.typography.titleMedium, // S·ª≠ d·ª•ng typography t·ª´ theme
                    fontWeight = FontWeight.SemiBold,
                    color = MaterialTheme.colorScheme.onSurface // M√†u ch·ªØ tr√™n surface t·ª´ theme
                )
                Text(
                    text = ticket.price,
                    style = MaterialTheme.typography.bodyLarge, // S·ª≠ d·ª•ng typography t·ª´ theme
                    fontWeight = FontWeight.Medium,
                    color = MaterialTheme.colorScheme.secondary // M√†u gi√° ri√™ng bi·ªát t·ª´ theme
                )
            }
        }
    }
}

@Composable
fun StudentDiscountSection(navController: NavHostController) {
    TicketCard(
        ticket = TicketOption("V√© th√°ng HSSV", "150.000 ƒë")
        ,navController = navController
    )
}

@Composable
fun LongTermTicketSection(navController: NavHostController) {
    TicketCard(
        ticket = TicketOption("V√© qu√Ω", "850.000 ƒë"),
        navController = navController
    )
    Spacer(modifier = Modifier.height(16.dp))
    TicketCard(
        ticket = TicketOption("V√© nƒÉm", "3.000.000 ƒë"),
        navController = navController
    )
}

@Composable
fun RoutesSection() {
    val routes = listOf(
        RouteInfo("ƒêi t·ª´ ga B·∫øn Th√†nh"),
        RouteInfo("ƒêi t·ª´ ga Ba Son"),
        RouteInfo("ƒêi t·ª´ ga VƒÉn Th√°nh")
    )

    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {
        routes.forEach { route ->
            RouteCard(route = route)
        }
    }
}

@Composable
fun RouteCard(route: RouteInfo) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { /* Handle route selection */ },
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface), // M√†u n·ªÅn card t·ª´ theme
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column {
                Text(
                    text = route.from,
                    style = MaterialTheme.typography.titleMedium, // S·ª≠ d·ª•ng typography t·ª´ theme
                    fontWeight = FontWeight.SemiBold,
                    color = MaterialTheme.colorScheme.onSurface // M√†u ch·ªØ tr√™n surface t·ª´ theme
                )
            }

            Text(
                text = route.details,
                style = MaterialTheme.typography.bodyMedium, // S·ª≠ d·ª•ng typography t·ª´ theme
                fontWeight = FontWeight.Medium,
                color = MaterialTheme.colorScheme.primary, // M√†u chi ti·∫øt t·ª´ theme
                modifier = Modifier.clickable { /* Handle details */ }
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun BuyTicketScreenPreview() {
    // ƒê·∫£m b·∫£o preview s·ª≠ d·ª•ng HcmursAppTheme ƒë·ªÉ th·∫•y ƒë√∫ng m√†u s·∫Øc
    HcmursAppTheme {
        val navController = rememberNavController()
        BuyTicketScreen(navController = navController)
    }
}